---
title: "Introduction to Metabolomics"
author: "Jake Sauter"
date: "2/19/2021"
output: 
  html_document: 
    toc: false
editor_options: 
  chunk_output_type: console
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, 
                      warning=FALSE, 
                      error=FALSE)
```

## **Data Preprocessing**

## **Loading Data**

```{r}
getwd()

library(magrittr)
data_dir <- "/home/x1/Documents/Weill_Cornell/Functional_Interpretation/metabolomics/homework_1/data/"
data_filename <- list.files(data_dir, "Simulated_metabolomics_data.RData", 
                            full.names = TRUE)
data_filename %<>% normalizePath(mustWork=TRUE)
data_env <- new.env()
load(data_filename, envir = data_env)
ls(data_env)
```

We see that there are three objects loaded into the `data_env` 
environment from this data file. Let us first check the type 
and dimensionality of each of these new variables.

```{r}
str(data_env$gender)
```

```{r}
str(data_env$annotations)
```


```{r}
str(data_env$dat)
```

### **Checking Data Quality**

We will first check overall metabolite measurement levels between the samples
to ensure that there are no **batch effects** or experimental abnormalities.
We note that it is commonly accepted to **log** biological data before 
interpretation as this usually results in **normally distributed** data. 

```{r, echo=FALSE}
library(tidyverse)
library(patchwork)
```

```{r, fig.width=8, fig.height=5}
df <- 
  data_env %>%
  .$dat %>% 
  log() %>% 
  as.data.frame() %>% 
  mutate(sample_num = row_number()) %>% 
  pivot_longer(-c(sample_num), 
               names_to='metabolite', values_to="concentration")

plot_list <- vector('list', 9)
for (group_num in 1:9) {
  first_sample <- 1 + (100 * (group_num - 1))
  last_sample <- 100 * (group_num - 1) + 100

  plot_list[[group_num]] <- df %>% 
    filter(sample_num >= first_sample, 
           sample_num <= last_sample) %>% 
    ggplot() + 
      geom_boxplot(aes(x=sample_num, 
                       y=concentration, 
                       group=sample_num)) + 
      ylim(c(-4, 6))
}

(plot_list[[1]] + plot_list[[2]] + plot_list[[3]]) / 
(plot_list[[4]] + plot_list[[5]] + plot_list[[6]]) / 
(plot_list[[7]] + plot_list[[8]] + plot_list[[9]])
```

**What do you observe? What possible reasons could there be? Tip: Omics data should always be logged before visualization.**


Let's more closely visualize those samples that appear to have higher measurement
levels all-around on all of the studied metabolites.


```{r, fig.height=4}
plot_list[[1]]
```

We see here that there is a specific set of samples that shows increased concentration measurements relative to all other experiments seen in this dataset.

### **Quotient Normalization**

**Steps for Quotient Normalization**:

* Calculate the median sample
* For Each Sample: 
  + Calculate the quotient of every metabolite concentration level with respect to the median sample 
  + Determine the median metabolite quotient (*MMQ*)
  + Divide the concentration of all metabolites in the sample by the *MMQ*

```{r}
median_sample <- apply(data_env$dat, 2, median)
normalized_dat <- data_env$dat 

for (i in 1:nrow(normalized_dat)) {
  quotient <- data_env$dat[i,] / median_sample
  median_quotient <- median(quotient)
  normalized_dat[i,] = data_env$dat[i,] / median_quotient
}
```


```{r, fig.height=6}
library(tidyverse)
library(patchwork)

df_before <- 
  data_env %>% 
  .$dat %>%
  .[1:100, ] %>% 
  log() %>% 
  as.data.frame() %>% 
  mutate(sample_num = row_number()) %>% 
  pivot_longer(-c(sample_num), 
               names_to='metabolite', values_to="concentration")
p1 <- 
  df_before %>% 
  ggplot() + 
        geom_boxplot(aes(x=sample_num, 
                         y=concentration, 
                         group=sample_num))

df_after <- 
  normalized_dat %>%
  .[1:100, ] %>% 
  log() %>% 
  as.data.frame() %>% 
  mutate(sample_num = row_number()) %>% 
  pivot_longer(-c(sample_num), 
               names_to='metabolite', values_to="concentration")

p2 <- 
  df_after %>% 
  ggplot() + 
        geom_boxplot(aes(x=sample_num, 
                         y=concentration, 
                         group=sample_num))

p1 / p2
```


**TODO: Compare the data before and after normalization via boxplots. What do you observe?**

## **Phenotype association**

### **Male vs Female **

We will first analyze the metabolite differences between males 
and females, using t-tests.

```{r}
?t.test
```

For each METABOLITE, we will be performing a t-test
between the expression profiles of groups split
between sex

We will be performing these test on the **normalized**, 
and **logged** data. 

```{r}
log_norm_dat <- log(normalized_dat)
```

Now we can perform a `t.test` for each metabolite

```{r}
metabolites <- colnames(log_norm_dat)

p_vals <- vector('double', length(metabolites))
names(p_vals) <- metabolites

for (metabolite in metabolites) {
  male   <- log_norm_dat[data_env$gender==1, metabolite]
  female <- log_norm_dat[data_env$gender==2, metabolite]
  p_vals[metabolite] <- t.test(male, female)$p.value
}

hist(p_vals, 
     main='P-values for Metabolites by Sex', 
     xlab='P values')
```

**What do you observe? Perform multiple testing correction with a method and Î± of your choice. **

Below we can see the resultant pvalues as well as their
adjusted counterparts. 

```{r}
?p.adjust
```

```{r}
adj_p_vals <- p.adjust(p_vals, 'bonferroni')

par(mfrow = c(1, 2))

hist(p_vals, 
     main='Original P-values', 
     xlab='P values')

adj_p_vals <- p.adjust(p_vals, 'bonferroni')
hist(adj_p_vals, 
     main='Bonferroni corrected P-values', 
     xlab='P values')
```


**How many metabolites are significantly associated with gender before and after multiple testing correction?**

```{r}
before <- length(which(p_vals < 0.05))
after <- length(which(adj_p_vals < 0.05))
bp <- barplot(c(before, after), 
        main = "Significant Metabolites by Sex", 
        ylab = "# Significant Metabolites", 
        names.arg = c('Before correction', 'After correction'), 
        col = c("#f45044", "#4496f4"))

text(bp, c(before,after)/2, labels = c(before,after), font = 2)
```


**Which 10 metabolites are most significantly associated with gender? Which pathways do these metabolites belong to?**

```{r}
library(knitr)
top_ten <- names(sort(adj_p_vals)[1:10])

data_env$annotations %>% 
  as.data.frame() %>% 
  filter(name %in% top_ten) %>% 
  kable()

```

**Visualize the differences between male and female for the top hit.**

**TODO: I could do paired boxplots for the first 5 hits or so to make the graph less empty**

```{r, fig.width=4}
top_hit <- names(sort(adj_p_vals)[1])

male <- log_norm_dat[data_env$gender==1, top_hit]
female <- log_norm_dat[data_env$gender==2, top_hit]

male <- c(male, rep(NA, length(female) - length(male)))

df <- 
  data.frame(Male=male, 
             Female=female) %>%
  mutate(index = row_number()) %>% 
  pivot_longer(-c(index), 
               names_to='sex', values_to="concentration") %>% 
  mutate(sex = factor(sex, levels = c('Male', 'Female')))
  


df %>% 
  ggplot() + 
  geom_boxplot(aes(x=sex, 
                   y=concentration, 
                   fill=sex),
                width = 0.5
               ) + 
  theme(legend.position = "none") + 
  labs(title=paste('Male vs Female Concentration of', top_hit)) + 
  xlab("") + 
  ylab("Normalized Concentration")
  
```


## **Gaussian graphical model (GGM)**

### **Partial Correlations and P-Values**

We will use the `ppcor` package to calculate the partial correlations
between all of the measured metabolites in our samples.

```{r}
pcor <- ppcor::pcor(log_norm_dat)
names(pcor)
```

```{r}
p_vals <- pcor$p.value
hist(p_vals, 
     main = "P values of Partial Corellations", 
     xlab = "P values")
```


### Bonferroni Correction

**Perform multiple testing correction with Bonferroni correction. When calculating the number of tests, remember that a correlation matrix is symmetric and the diagonal does not count (calculate how many values there are in a correlation matrix). Set all insignificant values and the in the partial correlation matrix to zero.**

```{r}
n <- ncol(log_norm_dat)
n_tests <- (n*(n-1))/2 

adj_p_vals <- p_vals * n_tests
adj_p_vals[adj_p_vals > 1] = 1

hist(adj_p_vals[adj_p_vals < 1], 
     main = "P values of Partial Corellations Less Than 1", 
     xlab = "P values less than 1")
```


```{r}
adj_mat <- pcor$estimate
adj_mat[adj_p_vals > 0.05] = 0

for (i in 1:nrow(adj_mat)) {
  adj_mat[i, i] = 0
}

colnames(adj_mat) <- colnames(log_norm_dat)
rownames(adj_mat) <- colnames(log_norm_dat)
```


### **Visualizing the GGM** 

**This matrix is the adjacency matrix of the underlying Gaussian graphical model. Visualize the network using the igraph package (tip: graph.adjacency function).**


```{r}
# Assemble the non-zero matrix
nonzero_metabolites <- c()

for (metabolite in colnames(adj_mat)) {
  if (any(adj_mat[metabolite, ] != 0) |
      any(adj_mat[, metabolite] != 0)) {
     nonzero_metabolites %<>% append(metabolite)
  }
}

adj_mat <- adj_mat[nonzero_metabolites, nonzero_metabolites]
```

```{r, eval=FALSE}
library(igraph) 

graph <- graph.adjacency(adj_mat, 
                         weighted = TRUE, 
                         diag = FALSE, 
                         mode = 'directed')
```


```{r}

```

```{r}
V(graph)$size <- degree(graph)
V(graph)$name[degree(graph) < 15] <- ""


png('graph.png',
    width  = 700,
    height = 700)

par(mai=c(0,0,1,0))

plot(graph, 
     layout=layout_with_dh(graph), 
     edge.arrow.size = 0.3, 
     vertex.label.font = 2, 
     vertex.label.cex = 0.9, 
     vertex.frame.color = 'darkslategrey')

dev.off()
```

![](/home/x1/Documents/Weill_Cornell/Functional_Interpretation/metabolomics/homework_1/imgs/graph.png)

